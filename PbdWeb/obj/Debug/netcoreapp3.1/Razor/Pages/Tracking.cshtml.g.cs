#pragma checksum "C:\Users\Swapnil\source\repos\gitswapnil\pbd_eduworld\PbdWeb\Pages\Tracking.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "40ca7f005514432fdecf887b0c86ad67c39c0d67"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(PbdWeb.Pages.Pages_Tracking), @"mvc.1.0.razor-page", @"/Pages/Tracking.cshtml")]
namespace PbdWeb.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Swapnil\source\repos\gitswapnil\pbd_eduworld\PbdWeb\Pages\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Swapnil\source\repos\gitswapnil\pbd_eduworld\PbdWeb\Pages\_ViewImports.cshtml"
using PbdWeb;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Swapnil\source\repos\gitswapnil\pbd_eduworld\PbdWeb\Pages\_ViewImports.cshtml"
using PbdWeb.Data;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"40ca7f005514432fdecf887b0c86ad67c39c0d67", @"/Pages/Tracking.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7538f2206d2fb6637e1e8f2b6fd5d19a4b4f81f0", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Tracking : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\Users\Swapnil\source\repos\gitswapnil\pbd_eduworld\PbdWeb\Pages\Tracking.cshtml"
  
    ViewData["Title"] = "Tracking";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""container-fluid"">
    <div class=""row"">
        <div class=""col-3 border-right"">
            This is first column
        </div>
        <div class=""col-9"">
            <div id=""myMap"" style='position:relative;width:800px;height:500px;'></div>
        </div>
    </div>
</div>

<script type=""text/javascript"">
    function GetMap() {
        var map = new Microsoft.Maps.Map('#myMap', { center: new Microsoft.Maps.Location(15.846696, 74.512125) });
        var center = map.getCenter();
        //Create custom Pushpin
        var pin = new Microsoft.Maps.Pushpin(center, {
            title: 'Home',
            subTitle: 'City Center',
            text: '1'
        });
        //Add the pushpin to the map
        map.entities.push(pin);

        let locations = [
            {
                x: 15.846972, 
                y: 74.516540
            },
            {
                x: 15.850564, 
                y: 74.516208
            },
            {
                ");
            WriteLiteral(@"x: 15.853260,
                y: 74.515218
            },
            {
                x: 15.854652, 
                y: 74.514381
            },
            {
                x: 15.853898, 
                y: 74.513255
            },
            {
                x: 15.852928,
                y: 74.511066 
            },
            {
                x: 15.854373,
                y: 74.508876
            },
            {
                x: 15.856752, 
                y: 74.506602
            },
            {
                x: 15.858521, 
                y: 74.506631
            },
            {
                x: 15.859419, 
                y: 74.508037 
            },
            {
                x: 15.862598, 
                y: 74.507286 
            },
            {
                x: 15.866739, 
                y: 74.509842
            }
        ];

        let i = 0;

        const updateLocation = () => {
            pin.setLocation(new Microsoft.Maps.Loc");
            WriteLiteral(@"ation(locations[i].x, locations[i].y));
            i++;
            if (i === locations.length) {
                clearInterval(inteval);
            }
        };

        let inteval = setInterval(function () {
            updateLocation();
        }, 5000);


    }
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TrackingModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<TrackingModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<TrackingModel>)PageContext?.ViewData;
        public TrackingModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
